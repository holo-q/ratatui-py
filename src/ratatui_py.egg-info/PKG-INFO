Metadata-Version: 2.4
Name: ratatui-py
Version: 0.3.1
Summary: Python bindings for ratatui_ffi (Ratatui C ABI) via ctypes
Author: holo-q
License: MIT License
        
        Copyright (c) 2025 holo-q
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
        
Project-URL: Homepage, https://github.com/holo-q/ratatui-py
Project-URL: Repository, https://github.com/holo-q/ratatui-py
Project-URL: Issues, https://github.com/holo-q/ratatui-py/issues
Project-URL: Changelog, https://github.com/holo-q/ratatui-py/blob/main/CHANGELOG.md
Project-URL: Documentation, https://github.com/holo-q/ratatui-py#readme
Keywords: ratatui,tui,terminal-ui,terminal,ffi,ctypes,rust,bindings,widgets
Classifier: Development Status :: 3 - Alpha
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Rust
Classifier: Programming Language :: C
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Terminals
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Dynamic: license-file

# ratatui-py — Python bindings for Ratatui (Rust TUI)

[![PyPI](https://img.shields.io/pypi/v/ratatui-py.svg)](https://pypi.org/project/ratatui-py/)
![Python Versions](https://img.shields.io/pypi/pyversions/ratatui-py.svg)
![License](https://img.shields.io/badge/license-MIT-blue.svg)
[![CI](https://github.com/holo-q/ratatui-py/actions/workflows/ci.yml/badge.svg)](https://github.com/holo-q/ratatui-py/actions/workflows/ci.yml)

Fast, zero-build Python bindings for [ratatui_ffi], the C ABI for
[Ratatui] — a modern Rust library for building rich terminal user
interfaces (TUIs). Use Ratatui’s performant rendering and widget set
from Python via `ctypes`, with prebuilt shared libraries bundled for
Linux, macOS, and Windows.

Key features:
- Zero-build install: bundles a prebuilt shared library when available
  and falls back to building from source when configured.
- Cross‑platform: loads `libratatui_ffi.so` (Linux), `libratatui_ffi.dylib` (macOS), or `ratatui_ffi.dll` (Windows).
- Idiomatic Python wrappers: start quickly with `Terminal`, `Paragraph`, `List`, `Table`, `Gauge`, and more.
- Minimal overhead: direct FFI calls using `ctypes`.
 - Layout helpers: `margin`, `split_h`, `split_v` for quick UI splits.

## Install

By default, install tries to bundle the Rust shared library automatically:

Order of strategies (first that works is used):
- Use a prebuilt library if `RATATUI_FFI_LIB` is set.
- Build from a local source if `RATATUI_FFI_SRC` is set (runs `cargo build --release`).
- Clone and build `holo-q/ratatui-ffi` at `RATATUI_FFI_TAG` if network and toolchain are available.

The resulting shared library is packaged at `ratatui_py/_bundled/` and loaded automatically at runtime.

## Quick start

```python
from ratatui_py import Terminal, Paragraph

with Terminal() as term:
    p = Paragraph.from_text("Hello from Python!\nThis is ratatui.\n\nPress any key to exit.")
    p.set_block_title("Demo", show_border=True)
    term.draw_paragraph(p)
    term.next_event(5000)  # wait for key or 5s
```

### Run loop helper

Prefer a simple app pattern? Use `App`:

```python
from ratatui_py import App, Terminal, Paragraph

def render(term: Terminal, state: dict) -> None:
    w, h = term.size()
    p = Paragraph.from_text("Hello ratatui-py!\nPress q to quit.")
    p.set_block_title("Demo", True)
    term.draw_paragraph(p, (0, 0, w, h))

def on_event(term: Terminal, evt: dict, state: dict) -> bool:
    return not (evt.get("kind") == "key" and evt.get("ch") in (ord('q'), ord('Q')))

App(render=render, on_event=on_event, tick_ms=250).run({})
```

## Widgets demo (List + Table + Gauge)

```python
from ratatui_py import Terminal, List, Table, Gauge, Style, FFI_COLOR

with Terminal() as term:
    lst = List()
    for i in range(5):
        lst.append_item(f"Item {i}")
    lst.set_selected(2)
    lst.set_block_title("List", True)

    tbl = Table()
    tbl.set_headers(["A", "B", "C"])
    tbl.append_row(["1", "2", "3"])
    tbl.append_row(["x", "y", "z"])
    tbl.set_block_title("Table", True)

    g = Gauge().ratio(0.42).label("42%")
    g.set_block_title("Gauge", True)

    term.draw_list(lst, (0,0,20,6))
    term.draw_table(tbl, (0,6,20,6))
    term.draw_gauge(g, (0,12,20,3))
```

## CLI demos

After installation you can explore interactive demos:

```
ratatui-py-demos
```

Or run specific examples:

```
ratatui-py-hello
ratatui-py-widgets
ratatui-py-life
ratatui-py-dashboard
```

## Environment variables
- `RATATUI_FFI_LIB`: absolute path to a prebuilt shared library to bundle/load.
- `RATATUI_FFI_SRC`: path to local ratatui-ffi source to build with cargo.
- `RATATUI_FFI_GIT`: override git URL (default `https://github.com/holo-q/ratatui-ffi.git`).
- `RATATUI_FFI_TAG`: git tag/commit to fetch for bundling (default `v0.1.5`).

## Platform support
- Linux: `x86_64` is tested; other targets may work with a compatible `ratatui_ffi` build.
- macOS: Apple Silicon and Intel are supported via `dylib`.
- Windows: supported via `ratatui_ffi.dll`.

## Troubleshooting
- Build toolchain not found: set `RATATUI_FFI_LIB` to a prebuilt shared library or install Rust (`cargo`) and retry.
- Wrong library picked up: ensure `RATATUI_FFI_LIB` points to a library matching your OS/arch.
- Import errors on fresh install: reinstall in a clean venv to ensure the bundled library is present.

### Terminal behavior and “clashes” cheat‑sheet

Ratatui (via crossterm) uses raw mode and (optionally) the alternate screen. Some terminal environments or Python shells can interact with these features in surprising ways. This section lists common scenarios and how to address them.

- Scrollback appears “lost”
  - Alt screen replaces the visible buffer; your scrollback is preserved but hidden until exit.
  - Fix: leave alt screen off (default in this package) or exit the app. To force alt screen: set `RATATUI_FFI_ALTSCR=1`.

- Keystrokes echo on screen, or input feels “sticky”
  - Raw mode controls whether the terminal echoes input and how keys are delivered.
  - Fix: raw mode is on by default here; to disable (e.g. for logging), set `RATATUI_FFI_NO_RAW=1`.

- Integrated terminals (VS Code, JetBrains, Jupyter, ipython)
  - Some shells may buffer or handle ANSI differently; full‑screen TUIs might flicker.
  - Fix: run from a regular terminal (e.g., GNOME Terminal, iTerm2, Windows Terminal). For diagnostics, disable alt screen and enable logging (see below).

- tmux/screen quirks
  - Multiplexers change terminfo and may alter mouse/keypress behavior or scrollback.
  - Fix: prefer alt screen in tmux (`RATATUI_FFI_ALTSCR=1`). If scrollback is a priority, keep alt screen off and accept in‑place updates.

- WSL/ConPTY (Windows)
  - ConPTY handling can differ across versions; ensure you’re using Windows Terminal or a recent console host.
  - If you see rendering anomalies, try disabling alt screen first.

- CI/headless usage
  - TUIs require a TTY; instead, use headless render helpers like `headless_render_*` and `ratatui_headless_render_frame` to snapshot output for tests.

- Unicode/emoji rendering
  - Ensure your locale is UTF‑8 and your font supports the glyphs you render. Some terminals need explicit configuration.

### Stable diagnostics and backtraces

Turn on robust diagnostics only when needed:

```bash
# rich diagnostics without alt screen
RATATUI_PY_DEBUG=1 uv run ratatui-py-demos

# or enable flags individually
RUST_BACKTRACE=full \
RATATUI_FFI_TRACE=1 \
RATATUI_FFI_NO_ALTSCR=1 \
RATATUI_FFI_PROFILE=debug \
RATATUI_FFI_LOG=ratatui_ffi.log \
uv run ratatui-py-demos
```

What these do:
- `RUST_BACKTRACE=full`: line‑accurate Rust backtraces on panics.
- `RATATUI_FFI_TRACE=1`: prints ENTER/EXIT lines for FFI calls and panics.
- `RATATUI_FFI_NO_ALTSCR=1`: avoids alt screen so logs remain visible.
- `RATATUI_FFI_PROFILE=debug`: bundles the debug cdylib for accurate symbols.
- `RATATUI_FFI_LOG=…`: saves all FFI logs to a file (recreated per run). Set `RATATUI_FFI_LOG_APPEND=1` to append.

Advanced:
- Python faulthandler: `PYTHONFAULTHANDLER=1` to dump tracebacks on signals.
- gdb/lldb: `gdb --args python -m ratatui_py.demo_runner` → `run`, then `bt full` on crash.

### Known pitfalls we harden against

- Dangling handles in batched frames (use‑after‑free)
  - Cause: passing raw FFI pointers without keeping owners alive across `draw_frame`.
  - Mitigation: Python wrapper retains strong references to widget owners for the duration of the draw.

- Out‑of‑bounds rectangles
  - Cause: computing rects larger than the frame area.
  - Mitigation: FFI clamps rects to the current frame before rendering.

- Panics inside FFI draw
  - Cause: invalid inputs or internal errors.
  - Mitigation: All FFI draw/init/free are wrapped with `catch_unwind`, logging the panic and backtrace and returning `false` rather than aborting.

If you still hit rendering anomalies or crashes, please open an issue with:
- Your OS/terminal, whether under tmux/screen/WSL.
- The exact command and environment variables used.
- `ratatui_ffi.log` and the console backtrace (if any).
- A minimal script to reproduce.

## Why ratatui-py?
- Bring Ratatui’s modern TUI widgets and layout engine to Python.
- Avoid ncurses boilerplate; focus on your UI and event loop.
- Keep Python for app logic while leveraging Rust for rendering.

## Links
- PyPI: https://pypi.org/project/ratatui-py/
- Source: https://github.com/holo-q/ratatui-py
- Ratatui (Rust): https://github.com/ratatui-org/ratatui
- ratatui_ffi: https://github.com/holo-q/ratatui-ffi

## License
MIT — see [LICENSE](./LICENSE).

[ratatui_ffi]: https://github.com/holo-q/ratatui-ffi
[Ratatui]: https://github.com/ratatui-org/ratatui
[!NOTE]
Demo preview placeholder: replace `docs/assets/dashboard.gif` with your recording.

![Dashboard demo](docs/assets/dashboard.gif)

See recording guide: docs/recording.md
