name: Wheels

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch: {}

jobs:
  build_wheels:
    name: Build wheels (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: cargo-${{ runner.os }}-${{ env.RATATUI_FFI_TAG }}
          restore-keys: |
            cargo-${{ runner.os }}-

      - name: Install cibuildwheel
        run: |
          python -m pip install -U pip
          python -m pip install cibuildwheel==2.21.3

      - name: Build wheels with bundled libratatui_ffi
        env:
          CIBW_BUILD: cp38-* cp39-* cp310-* cp311-* cp312-*
          CIBW_SKIP: pp* *musllinux*
          # Install Rust inside the build environment/container
          CIBW_BEFORE_ALL_LINUX: curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal
          CIBW_BEFORE_ALL_MACOS: curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal
          CIBW_BEFORE_ALL_WINDOWS: powershell -Command "irm https://win.rustup.rs -UseBasicParsing | iex; rustup-init -y --profile minimal"
          # Ensure cargo is on PATH in build env
          CIBW_ENVIRONMENT_LINUX: PATH=$HOME/.cargo/bin:$PATH PIP_CACHE_DIR=$HOME/.cache/pip
          CIBW_ENVIRONMENT_MACOS: PATH=$HOME/.cargo/bin:$PATH PIP_CACHE_DIR=$HOME/.cache/pip
          CIBW_ENVIRONMENT_WINDOWS: PATH=%USERPROFILE%\/.cargo/bin;%PATH% PIP_CACHE_DIR=%LocalAppData%\pip\Cache
          # Optionally pin the bundled ffi version (matches setup.py default)
          RATATUI_FFI_TAG: v0.2.0
        run: |
          python -m cibuildwheel --output-dir wheelhouse

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl

  sdist:
    name: Build sdist (source)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Build sdist
        run: |
          python -m pip install -U pip build
          python -m build --sdist
      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  release:
    name: Attach wheels to GitHub Release
    needs: build_wheels
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true

      - uses: softprops/action-gh-release@v2
        with:
          files: "*.whl"

  publish:
    name: Publish to PyPI
    needs: [sdist]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist
      - name: List distributions
        run: |
          ls -lah dist || true
      - name: Check distributions
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install -U pip twine
          shopt -s nullglob
          files=( dist/*.whl dist/*.tar.gz )
          echo "Distributions to check: ${files[@]:-<none>}"
          if ((${#files[@]})); then
            python -m twine check "${files[@]}"
          else
            echo "No distribution files found to check."
          fi
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          skip-existing: true
          verbose: true
          password: ${{ secrets.PYPI_API_TOKEN }}
