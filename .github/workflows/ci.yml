name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.9', '3.10', '3.11', '3.12' ]
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust (for ratatui_ffi build)
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install ruff mypy pytest
      - name: Build/bundle ratatui_ffi for tests
        env:
          RATATUI_FFI_TAG: v0.1.5
          RATATUI_FFI_PROFILE: release
        run: |
          python - << 'PY'
          from ratatui_py._bootstrap import ensure_runtime_lib
          ensure_runtime_lib()
          print('Bundled runtime lib for tests.')
          PY
          # Export path to bundled library for reliable loading during tests
          LIBDIR="$(python - <<'PY'
import pathlib
import ratatui_py, sys
p = pathlib.Path(ratatui_py.__file__).resolve().parent / '_bundled'
print(p)
PY
)"
          echo "RATATUI_FFI_LIB=$LIBDIR/$(python - <<'PY'
import sys
print('ratatui_ffi.dll' if sys.platform.startswith('win') else ('libratatui_ffi.dylib' if sys.platform=='darwin' else 'libratatui_ffi.so'))
PY
)" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$LIBDIR:$LD_LIBRARY_PATH" >> $GITHUB_ENV
      - name: Show bundled library info
        run: |
          echo "RATATUI_FFI_LIB=$RATATUI_FFI_LIB"
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
          ls -lah $(dirname "$RATATUI_FFI_LIB") || true
          python - << 'PY'
import os, sys, pathlib
p = os.environ.get('RATATUI_FFI_LIB')
print('Exists:', p, os.path.exists(p))
pkg = pathlib.Path('src/ratatui_py/_bundled')
print('Bundled dir exists:', pkg, pkg.exists(), 'contents:', list(pkg.iterdir()) if pkg.exists() else [])
PY
      - name: Lint (src only)
        run: ruff check src
        continue-on-error: true
      # Optional: enable mypy once types are finalized for bindings
      # - name: Type check
      #   run: mypy src
      - name: Tests
        env:
          RATATUI_FFI_LIB: ${{ env.RATATUI_FFI_LIB }}
          LD_LIBRARY_PATH: ${{ env.LD_LIBRARY_PATH }}
          PYTHONPATH: ${{ github.workspace }}/src
        run: pytest -q -vv
