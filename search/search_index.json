{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ratatui-py","text":"<p>Fast Python bindings for Ratatui, the modern Rust TUI library. Build rich terminal UIs with Python while leveraging Ratatui\u2019s performance and widgets.</p> <ul> <li>Zero-build install when a prebuilt shared library is available</li> <li>Cross-platform: Linux, macOS, Windows</li> <li>Idiomatic Python wrappers: Terminal, Paragraph, List, Table, Gauge, Tabs, BarChart, Sparkline, Scrollbar, Chart</li> </ul> <p>Get started in minutes:</p> <pre><code>from ratatui_py import Terminal, Paragraph\n\nwith Terminal() as term:\n    p = Paragraph.from_text(\"Hello from Python!\\nThis is ratatui.\")\n    p.set_block_title(\"Demo\", True)\n    term.draw_paragraph(p)\n    term.next_event(3000)\n</code></pre> <p>Quickstart \u2022 Demos \u2022 API</p>"},{"location":"api/","title":"API","text":"<p>Public classes and helpers:</p> <ul> <li><code>Terminal</code></li> <li><code>Paragraph</code></li> <li><code>List</code></li> <li><code>Table</code></li> <li><code>Gauge</code></li> <li><code>Tabs</code></li> <li><code>BarChart</code></li> <li><code>Sparkline</code></li> <li><code>Scrollbar</code></li> <li><code>Chart</code></li> <li><code>DrawCmd</code></li> <li><code>App</code> (event loop helper)</li> <li>Layout: <code>margin</code>, <code>split_h</code>, <code>split_v</code></li> </ul> <p>Headless helpers (render to string):</p> <ul> <li><code>headless_render_paragraph(width, height, paragraph)</code></li> <li><code>headless_render_list(width, height, list)</code></li> <li><code>headless_render_table(width, height, table)</code></li> <li><code>headless_render_gauge(width, height, gauge)</code></li> <li><code>headless_render_tabs(width, height, tabs)</code></li> <li><code>headless_render_barchart(width, height, barchart)</code></li> <li><code>headless_render_sparkline(width, height, sparkline)</code></li> <li><code>headless_render_chart(width, height, chart)</code></li> </ul> <p>See source under <code>src/ratatui_py/</code> for concrete signatures.</p>"},{"location":"demos/","title":"Demos","text":"<p>Preview: see the README\u2019s Recording section for how to capture a GIF/MP4. Once you have <code>docs/assets/dashboard.gif</code>, it will be rendered here automatically. Until then, no preview image is displayed to keep strict builds happy.</p> <p>The package installs several demo entrypoints. Run them from your shell:</p> <pre><code>ratatui-py-demos\n# or run specific ones\nratatui-py-hello\nratatui-py-widgets\nratatui-py-life\nratatui-py-dashboard\n</code></pre> <p>If you see errors about missing libraries, set <code>RATATUI_FFI_LIB</code> to a prebuilt shared library, or install Rust toolchain and let bundling build from source.</p> <p>Dashboard demo controls: - a/d: switch tabs - j/k: move selection - r: spike values - q: quit</p> <p>Recording instructions: see recording.md.</p>"},{"location":"quickstart/","title":"Quickstart","text":"<p>Install from PyPI and run the demo hub:</p> <pre><code>pip install ratatui-py\nratatui-py-demos\n</code></pre> <p>Minimal program:</p> <pre><code>from ratatui_py import Terminal, Paragraph\n\nwith Terminal() as term:\n    p = Paragraph.from_text(\"Hello ratatui-py!\\nPress any key to exit.\")\n    p.set_block_title(\"Demo\", True)\n    term.draw_paragraph(p)\n    term.next_event(5000)\n</code></pre> <p>App loop helper:</p> <pre><code>from ratatui_py import App, Terminal, Paragraph\n\ndef render(term: Terminal, state: dict) -&gt; None:\n    w, h = term.size()\n    p = Paragraph.from_text(state.get(\"msg\", \"Hi\"))\n    p.set_block_title(\"Demo\", True)\n    term.draw_paragraph(p, (0, 0, w, h))\n\ndef on_event(term: Terminal, evt: dict, state: dict) -&gt; bool:\n    if evt.get(\"kind\") == \"key\" and evt.get(\"ch\") in (ord('q'), ord('Q')):\n        return False\n    return True\n\nApp(render=render, on_event=on_event, tick_ms=250).run({\"msg\": \"Hello from App\"})\n</code></pre>"},{"location":"recording/","title":"Recording the Dashboard Demo","text":"<p>This shows how to record the <code>ratatui-py-dashboard</code> demo and generate an embeddable GIF/SVG for the README and docs.</p>"},{"location":"recording/#option-a-asciinema-gif-docker","title":"Option A: Asciinema + GIF (Docker)","text":"<p>1) Record a cast:</p> <pre><code>asciinema rec demo.cast -c \"ratatui-py-dashboard\"\n</code></pre> <p>2) Convert to GIF using the official converter (needs Docker):</p> <pre><code>docker run --rm -v \"$PWD\":/data asciinema/asciicast2gif \\\n  -t solarized-dark -S 2 -s 2 demo.cast docs/assets/dashboard.gif\n</code></pre> <ul> <li><code>-t</code> theme (try: <code>tango</code>, <code>solarized-dark</code>, <code>solarized-light</code>)</li> <li><code>-S</code> speed multiplier (2x)</li> <li><code>-s</code> scale factor (2x)</li> </ul> <p>3) Commit <code>docs/assets/dashboard.gif</code> and it will render in README/docs.</p>"},{"location":"recording/#option-b-asciinema-svg-svg-term","title":"Option B: Asciinema + SVG (svg-term)","text":"<p>1) Record a cast:</p> <pre><code>asciinema rec demo.cast -c \"ratatui-py-dashboard\"\n</code></pre> <p>2) Convert to SVG via svg-term (Node.js required):</p> <pre><code>npm i -g svg-term-cli\nsvg-term --cast demo.cast --out docs/assets/dashboard.svg \\\n  --window --width 100 --height 30 --font-size 14\n</code></pre> <ul> <li>Adjust <code>--width/--height</code> to match columns/rows, or omit to auto-fit.</li> </ul> <p>3) Embed <code>docs/assets/dashboard.svg</code> in README/docs instead of GIF.</p>"},{"location":"recording/#option-c-host-on-asciinemaorg","title":"Option C: Host on asciinema.org","text":"<p>1) Upload the cast:</p> <pre><code>asciinema upload demo.cast\n</code></pre> <p>2) Copy the share URL and embed a link or badge in README.</p>"},{"location":"recording/#tips","title":"Tips","text":"<ul> <li>Use a clean background (e.g., solarized-dark) for legibility.</li> <li>Resize your terminal to a common size (e.g., 100x30) before recording.</li> <li>Keep the clip short (10\u201320 seconds) and show the core interactions: tabs (a/d), selection (j/k), spike (r), quit (q).</li> </ul>"}]}